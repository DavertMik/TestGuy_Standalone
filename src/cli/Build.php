<?php
/**
 * Author: davert
 * Date: 17.08.11
 *
 * Class TestGuy_Command_Build
 * Description:
 *
 */

namespace TestGuyCommand;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class Build extends \Symfony\Component\Console\Command\Command
{

	protected $template = <<<EOF
<?php
// This class was automatically generated by build task
// You can change it manually, but it will be overwritten on next build

/**
%s
**/


class %s extends %s
{


}


EOF;

	protected function configure()
	{
        $this->setName('build');
	}


	protected function execute(InputInterface $input, OutputInterface $output)
	{
		$dialog = new \Symfony\Component\Console\Helper\DialogHelper();
        $confirmed = $dialog->askConfirmation($output, "This will build TestGuy class in your project's lib/test dir. Do you want to proceed? (Y/n)");

		if (!$confirmed) return;

		TestGuy_Manager::init();
		$phpdoc = array();
		$methodCounter = 0;
		foreach (TestGuy_Manager::$modules as $modulename => $module) {
			$class = new ReflectionClass($modulename);
			$methods = $class->getMethods();
			$phpdoc[] = '';
			$phpdoc[] = 'Methods from ' . $modulename;
			foreach ($methods as $method) {
				if (strpos($method->name, '_') === 0) continue;
				if (!$method->isPublic()) continue;
				$params = array();
				foreach ($method->getParameters() as $param) {
					if ($param->isOptional()) continue;
					$params[] = '$' . $param->name;
				}

				$params = implode(', ', $params);
				$phpdoc[] = '@method void ' . $method->name . '(' . $params . ')';
				$methodCounter++;
			}
		}
		$output = sprintf($this->template, implode("\r\n * ", $phpdoc), 'TestGuy', 'BaseTestGuy');

		@mkdir(sfConfig::get('sf_lib_dir') . '/test');
		file_put_contents($file = sfConfig::get('sf_lib_dir') . '/test/TestGuy.class.php', $output);
		$this->log("$file generated sucessfully. $methodCounter methods added");

	}

}
